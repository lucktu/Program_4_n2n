name: Docker-build-and-push

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  # schedule:
  #   - cron: "28 17 * * *"
  push:
    branches: ["master"]
    # Publish semver tags as releases.
    # tags: ["v*.*.*"]

  pull_request:
    branches: ["master"]

  workflow_dispatch:
    inputs:
      version_b_s_rc:
        description: "version_b_s_rc e.g. v2_2.7.0_r528 | v2"
        required: false
      force_push:
        description: "force push to registry"
        required: true
        type: boolean
        default: false
      DOCKER_APP_NAME:
        description: "docker app name             e.g. n2n"
        default: "n2n_lucktu"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_OK:
        description: "docker_build_dockerfile_ok  e.g. Dockerfile.ubuntu-latest | Dockerfile.alpine-latest | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_FIX:
        description: "docker_build_dockerfile_fix e.g. Dockerfile.ubuntu-18.04 | Dockerfile.alpine-3.8 | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string



  workflow_call:
    inputs:
      version_b_s_rc:
        required: true
        type: string

      force_push:
        description: "force push to registry"
        required: true
        type: boolean
        default: false
      DOCKER_APP_NAME:
        description: "docker app name             e.g. n2n"
        default: "n2n_lucktu"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_OK:
        description: "docker_build_dockerfile_ok  e.g. Dockerfile.ubuntu-latest | Dockerfile.alpine-latest | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_FIX:
        description: "docker_build_dockerfile_fix e.g. Dockerfile.ubuntu-18.04 | Dockerfile.alpine-3.8 | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  REGISTRY: docker.io
  BIG_VERSION: v3
  SMALL_VERSION: 3.1.1-16
  COMMIT: 1200
  FORCE_PUSH: false
  # BIG_VERSION: v2
  # SMALL_VERSION: 2.7.0
  # COMMIT: 528

  # github.repository as <account>/<repo>
  NED_LIBFIX_VERSIONS_B_S_rC: "v2_2.3.0, v2s_2.1.0_r111, v1"
  TEST_PLATFORM: "linux/386"
  DOCKER_APP_NAME: "n2n_lucktu"
  DOCKER_BUILD_DOCKERFILE_OK: "Dockerfile.debian-stable"
  DOCKER_BUILD_DOCKERFILE_FIX: "Dockerfile.alpine-latest"

jobs:
  init-version:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      BUILD_BIG_VERSION: ${{ steps.init-build-version.outputs.BUILD_BIG_VERSION }}
      BUILD_SMALL_VERSION: ${{ steps.init-build-version.outputs.BUILD_SMALL_VERSION }}
      BUILD_COMMIT: ${{ steps.init-build-version.outputs.BUILD_COMMIT }}
      BUILD_PLATFORMS: ${{ steps.init-build-version.outputs.BUILD_PLATFORMS }}
      TEST_PLATFORM: ${{ steps.init-build-version.outputs.TEST_PLATFORM }}
      BUILD_VERSION_B_S_rC: ${{ steps.init-build-version.outputs.BUILD_VERSION_B_S_rC }}
      LATEST_VERSION: ${{ steps.init-build-version.outputs.LATEST_VERSION }}
      NEED_FIX: ${{ steps.init-build-version.outputs.NEED_FIX }}
      ONLY_BIGVERSION: ${{ steps.check-big-version-only.outputs.ONLY_BIGVERSION }}
      DOCKER_APP_NAME: ${{ steps.init-docker-build-info.outputs.DOCKER_APP_NAME }}
      DOCKER_BUILD_DOCKERFILE_OK: ${{ steps.init-docker-build-info.outputs.DOCKER_BUILD_DOCKERFILE_OK }}
      DOCKER_BUILD_DOCKERFILE_FIX: ${{ steps.init-docker-build-info.outputs.DOCKER_BUILD_DOCKERFILE_FIX }}

    steps:
      - name: Init DOCKER_BUILD info
        id: init-docker-build-info
        run: |
          input_DOCKER_APP_NAME="${{ inputs.DOCKER_APP_NAME }}"
          input_DOCKER_BUILD_DOCKERFILE_OK="${{ inputs.DOCKER_APP_NAME }}"
          input_DOCKER_BUILD_DOCKERFILE_FIX="${{ inputs.DOCKER_APP_NAME }}"

          env_DOCKER_APP_NAME="${{ env.DOCKER_APP_NAME }}"
          env_DOCKER_BUILD_DOCKERFILE_OK="${{ env.DOCKER_APP_NAME }}"
          env_DOCKER_BUILD_DOCKERFILE_FIX="${{ env.DOCKER_APP_NAME }}"

          DOCKER_APP_NAME="${input_DOCKER_APP_NAME:-${env_DOCKER_APP_NAME}}"
          DOCKER_BUILD_DOCKERFILE_OK="${input_DOCKER_BUILD_DOCKERFILE_OK:-${env_DOCKER_BUILD_DOCKERFILE_OK}}"
          DOCKER_BUILD_DOCKERFILE_FIX="${input_DOCKER_BUILD_DOCKERFILE_FIX:-${env_DOCKER_BUILD_DOCKERFILE_FIX}}"

          echo "DOCKER_APP_NAME=${DOCKER_APP_NAME}" >>  $GITHUB_OUTPUT
          echo "DOCKER_BUILD_DOCKERFILE_OK=${DOCKER_BUILD_DOCKERFILE_OK}" >>  $GITHUB_OUTPUT
          echo "DOCKER_BUILD_DOCKERFILE_FIX=${DOCKER_BUILD_DOCKERFILE_FIX}" >>  $GITHUB_OUTPUT

      - name: Check big version only
        id: check-big-version-only
        run: |
          LOG_INFO() {
              echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          # if [[ "true" == "${{ ('v2s' == inputs.version_b_s_rc || 'v2' == inputs.version_b_s_rc || 'v1' == inputs.version_b_s_rc) || (('v2s' == env.BIG_VERSION || 'v2' == env.BIG_VERSION || 'v1' == env.BIG_VERSION) && env.SMALL_VERSION == '') }}" ]];then
          #   if [[ "true" == "${{ 'v2s' == inputs.version_b_s_rc || 'v2' == inputs.version_b_s_rc || 'v1' == inputs.version_b_s_rc }}" ]];then

          if [[ -n "$(echo ${{ inputs.version_b_s_rc }} | grep -E '^v[0-9]s?$')" || ( -n "$(echo ${{ env.BIG_VERSION }} | grep -E '^v[0-9]s?$')" && env.SMALL_VERSION == '') ]]; then
            if [[ -n "$(echo ${{ inputs.version_b_s_rc }} | grep -E '^v[0-9]s?$')" ]];then
              LOG_WARNING USE inputs.version_b_s_rc
              BUILD_VERSION_B_S_rC=${{ inputs.version_b_s_rc }}
            elif [[ -n "$(echo ${{ env.BIG_VERSION }} | grep -E '^v[0-9]s?$')" ]];then
              LOG_WARNING USE env.BIG_VERSION
              BUILD_VERSION_B_S_rC=${{ env.BIG_VERSION }}
            fi
            BUILD_PLATFORMS='linux/386,linux/arm/v7,linux/amd64,linux/arm64/v8'
            LOG_INFO "BUILD_VERSION_B_S_rC: ${BUILD_VERSION_B_S_rC}"
            LOG_INFO "BUILD_PLATFORMS: ${BUILD_PLATFORMS}"
            echo "BUILD_BIG_VERSION=${BUILD_VERSION_B_S_rC}" >> $GITHUB_OUTPUT
            echo "BUILD_VERSION_B_S_rC=${BUILD_VERSION_B_S_rC}" >> $GITHUB_OUTPUT
            echo "BUILD_PLATFORMS=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
            # Error: buildx failed with: ERROR: docker exporter does not currently support exporting manifest lists
            # echo "TEST_PLATFORM=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
            echo "TEST_PLATFORM=${{ env.TEST_PLATFORM }}" >> $GITHUB_OUTPUT
            echo "ONLY_BIGVERSION=true" >> $GITHUB_OUTPUT
          else
            echo "ONLY_BIGVERSION=false" >> $GITHUB_OUTPUT
          fi
      - name: Checkout repository
        # depends on this library
        if: steps.check-big-version-only.outputs.ONLY_BIGVERSION != 'true'
        uses: actions/checkout@v3

      - name: Check init-build-version
        id: init-build-version
        run: |
          LOG_INFO() {
              echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          if [[ "${{ steps.check-big-version-only.outputs.ONLY_BIGVERSION }}" == "true" ]]; then
            BUILD_VERSION_B_S_rC="${{ steps.check-big-version-only.outputs.BUILD_VERSION_B_S_rC }}"
            BUILD_PLATFORMS="${{ steps.check-big-version-only.outputs.BUILD_PLATFORMS }}"
            TEST_PLATFORM="${{ steps.check-big-version-only.outputs.TEST_PLATFORM }}"
            LOG_INFO "BUILD_VERSION_B_S_rC: ${BUILD_VERSION_B_S_rC}"
            LOG_INFO "BUILD_PLATFORMS: ${BUILD_PLATFORMS}"
            LOG_INFO "TEST_PLATFORM: ${TEST_PLATFORM}"
            echo "BUILD_BIG_VERSION=${BUILD_VERSION_B_S_rC}" >> $GITHUB_OUTPUT
            echo "BUILD_VERSION_B_S_rC=${BUILD_VERSION_B_S_rC}" >> $GITHUB_OUTPUT
            echo "BUILD_PLATFORMS=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
            # Error: buildx failed with: ERROR: docker exporter does not currently support exporting manifest lists
            # echo "TEST_PLATFORM=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
            echo "TEST_PLATFORM=${TEST_PLATFORM}" >> $GITHUB_OUTPUT
            echo "ONLY_BIGVERSION=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          PROJECT_ROOT_DIR=$(pwd)
          echo "init-version - PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR}"
          cd ./scripts
          chmod +x *.sh
          . init_logger.sh
          . init_path.sh
          . get_file_infos.sh
          . scan_one_build.sh

          if [[  "true" == "${{ inputs.version_b_s_rc != '' }}" ]];then
            LOG_WARNING "use version_b_s_rc version"
            SCAN_ONE_BUILD ${{ inputs.version_b_s_rc }}
            BUILD_BIG_VERSION=${build_big_version}
            BUILD_SMALL_VERSION=${build_small_version}
            BUILD_COMMIT=${build_commit}
          elif [[ "true" == "${{ env.BIG_VERSION != '' }}" || "true" == "${{ env.SMALL_VERSION != '' }}"   ]];then
            LOG_WARNING "use env version"
            BUILD_BIG_VERSION=${{env.BIG_VERSION}}
            BUILD_SMALL_VERSION=${{env.SMALL_VERSION}}
            BUILD_COMMIT=${{env.COMMIT}}
          else
            LOG_WARNING "use latest version"
            src_file=$(ls ${PROJECT_ROOT_DIR}/Linux | grep x64)
            LOG_INFO "src_file: ${src_file}"
            GET_FILE_INFOS ${src_file}
            BUILD_BIG_VERSION=${src_big_version}
            BUILD_SMALL_VERSION=${src_small_version}
            BUILD_COMMIT=${src_commit}
          fi
          if [[ -n "$(ls ../Linux/ | grep -E ${BUILD_BIG_VERSION}.*${BUILD_SMALL_VERSION}.*${BUILD_COMMIT})" ]];then
            LATEST_VERSION=true
          else
            LATEST_VERSION=false
          fi
          LOG_INFO "LATEST_VERSION: ${LATEST_VERSION}"
          echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          version_b_s_rc=${BUILD_BIG_VERSION}_${BUILD_SMALL_VERSION}${BUILD_COMMIT:+_r}${BUILD_COMMIT}
          LOG_WARNING version_b_s_rc: ${version_b_s_rc}
          SCAN_ONE_BUILD ${version_b_s_rc}

          echo "BUILD_BIG_VERSION=${BUILD_BIG_VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_SMALL_VERSION=${BUILD_SMALL_VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_COMMIT=${BUILD_COMMIT}" >> $GITHUB_OUTPUT
          echo "BUILD_PLATFORMS=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
          # echo "TEST_PLATFORM=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
          if [[ ${BUILD_PLATFORMS} =~ ${{ env.TEST_PLATFORM }} ]];then
            echo "TEST_PLATFORM=${{ env.TEST_PLATFORM }}" >> $GITHUB_OUTPUT
          else
            echo "TEST_PLATFORM=${BUILD_PLATFORMS%%,*}" >> $GITHUB_OUTPUT
          fi
          echo "BUILD_VERSION_B_S_rC=${BUILD_VERSION_B_S_rC}" >> $GITHUB_OUTPUT

          # ned_libfix_versions_b_s_rc="${{ env.NED_LIBFIX_VERSIONS_B_S_rC }}"
          l_ned_libfix_versions_b_s_rc=(${ned_libfix_versions_b_s_rc//,/ })
          for ned_libfix_versions_b_s_rc in ${l_ned_libfix_versions_b_s_rc[@]};do
            if [[ "${BUILD_VERSION_B_S_rC}" == "${ned_libfix_versions_b_s_rc}" ]];then
              LOG_WARNING 需要修复 - ${BUILD_VERSION_B_S_rC}
              echo "NEED_FIX=true">> $GITHUB_OUTPUT
              exit 0
            fi
          done
  check-push:
    needs: [init-version]
    runs-on: ubuntu-latest
    outputs:
      last_pulled_date: ${{ steps.tag_last_pushed.outputs.last_pulled_date }}
      skip_build_push: ${{ steps.tag_last_pushed.outputs.skip_build_push }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: get tag_last_pushed
        id: get_tag_last_pushed
        uses: sergeysova/jq-action@v2
        with:
          cmd: curl -k -sS https://hub.docker.com/v2/repositories/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}/tags/${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} | jq '.tag_last_pushed'

      - name: Check tag_last_pushed
        id: tag_last_pushed
        run: |

          LOG_INFO() {
          echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          # e.g. "2022-10-30T19:29:49.877019Z"
          last_pulled_date=${{ steps.get_tag_last_pushed.outputs.value }}
          echo "last_pulled_date=${last_pulled_date}" >> $GITHUB_OUTPUT
          LOG_INFO "check tag - ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
          LOG_INFO "last_pulled_date - ${last_pulled_date}"
          if [[ "true" == "${{ env.FORCE_PUSH }}" || "true" == "${{ inputs.force_push }}" ]]; then
              LOG_WARNING "强制 编译/推送"
          elif [[ "${last_pulled_date,,}" != "null" || "${{ needs.init-version.outputs.BUILD_PLATFORMS }}" == "" ]]; then
              echo "skip_build_push=true" >> $GITHUB_OUTPUT
              LOG_INFO "跳过 编译/推送"
              exit 0
          else
              LOG_INFO "准备 编译/推送"
          fi

  build-psuh-n2n_lucktu:
    needs: [init-version, check-push]
    if: needs.check-push.outputs.skip_build_push != 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository on build-psuh
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.13.1"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      - name: Copy Build Files
        id: copy-build-files
        run: |
          export VERSION_B_S_rC=${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}
          PROJECT_ROOT_DIR=$(pwd)
          echo "copy-build-files - PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR}"
          cd ./scripts
          chmod +x *.sh
          . init_logger.sh
          . init_path.sh
          . scan_one_build.sh
          SCAN_ONE_BUILD ${VERSION_B_S_rC}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ needs.init-version.outputs.LATEST_VERSION == 'true' }}
            type=raw,value=v3,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v3' }}
            type=raw,value=releases-v3,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v3' }}
            type=raw,value=v2s,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v2s' && needs.init-version.outputs.BUILD_SMALL_VERSION == '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=releases-v2s,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v2s' && needs.init-version.outputs.BUILD_SMALL_VERSION == '2.1.0' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=v2,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v2' && needs.init-version.outputs.BUILD_SMALL_VERSION == '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=releases-v2,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v2' && needs.init-version.outputs.BUILD_SMALL_VERSION == '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=v1,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v1' && needs.init-version.outputs.BUILD_SMALL_VERSION == '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=releases-v1,enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION == 'v1' && needs.init-version.outputs.BUILD_SMALL_VERSION == '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=${{ format( '{0}_{1}_r{2}', needs.init-version.outputs.BUILD_BIG_VERSION, needs.init-version.outputs.BUILD_SMALL_VERSION, needs.init-version.outputs.BUILD_COMMIT ) }}, enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION != '' && needs.init-version.outputs.BUILD_SMALL_VERSION != '' && needs.init-version.outputs.BUILD_COMMIT != '' }}
            type=raw,value=${{ format( '{0}_{1}', needs.init-version.outputs.BUILD_BIG_VERSION, needs.init-version.outputs.BUILD_SMALL_VERSION, needs.init-version.outputs.BUILD_COMMIT ) }}, enable=${{ needs.init-version.outputs.BUILD_BIG_VERSION != '' && needs.init-version.outputs.BUILD_SMALL_VERSION != '' && needs.init-version.outputs.BUILD_COMMIT == '' }}
            type=raw,value=${{ format( 'v.{1}_r{2}', needs.init-version.outputs.BUILD_BIG_VERSION, needs.init-version.outputs.BUILD_SMALL_VERSION, needs.init-version.outputs.BUILD_COMMIT ) }}, enable=${{ needs.init-version.outputs.BUILD_SMALL_VERSION != '' && needs.init-version.outputs.BUILD_COMMIT != '' }}
            type=raw,value=${{ format( 'v.{1}',  needs.init-version.outputs.BUILD_BIG_VERSION, needs.init-version.outputs.BUILD_SMALL_VERSION, needs.init-version.outputs.BUILD_COMMIT ) }}, enable=${{ needs.init-version.outputs.BUILD_SMALL_VERSION != '' }}
            type=raw,value=${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}
          labels: |
            org.opencontainers.image.version=${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}

      - name: Build and load to Docker
        uses: docker/build-push-action@v3
        # if: needs.init-version.outputs.NEED_FIX != 'true'
        with:
          context: .
          file: ${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_OK }}
          platforms: ${{ needs.init-version.outputs.TEST_PLATFORM }}
          load: true
          no-cache: true
          tags: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:test
          build-args: |
            VERSION_B_S_rC=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BIG_VERSION=${{ needs.init-version.outputs.BUILD_BIG_VERSION }}
            SMALL_VERSION=${{ needs.init-version.outputs.BUILD_SMALL_VERSION }}
            COMMIT=${{ needs.init-version.outputs.BUILD_COMMIT }}

      - name: Test n2n
        id: n2n-test
        run: |
          LOG_INFO() {
              echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          set -e
          # if [[ "${{ needs.init-version.outputs.NEED_FIX }}" == "true" ]];then
          #   LOG_WARNING 需要修复 - ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}
          #   LOG_WARNING 使用 ${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_FIX }} - ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}
          #   echo "build_dockerfile=${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_FIX }}">> $GITHUB_OUTPUT
          #   exit 0
          # fi
          LOG_WARNING "Test start: ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
          platforms=${{ needs.init-version.outputs.TEST_PLATFORM }}
          l_platforms=(${platforms//,/ })
          for test_platform in ${l_platforms[@]};do
            LOG_WARNING "Test for platform: ${test_platform}"
            edge_result="$(docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:test \
              edge -h 2>&1 | xargs -0 --no-run-if-empty -I {} echo {})"
            if [[ -n "$(echo ${edge_result} | grep -E '(libcrypto.so.1.0.0)|(/lib/ld-linux.so.3)')" ]];then
              LOG_ERROR 出错了: ${edge_result}
              LOG_WARNING 使用 ${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_FIX }} - ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}
              echo "build_dockerfile=${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_FIX }}">> $GITHUB_OUTPUT
              exit 0
            fi
            if [[ -z "$(echo ${edge_result,,} | grep welcome)" ]];then
              LOG_ERROR 出错了: ${edge_result}
              exit 1
            fi
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:test \
              edge -h
            LOG_WARNING "Test pass - edge"
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:test \
              ls /usr/local/sbin/supernode
            # supernode will not pass
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:test \
              supernode -h  || echo
            # LOG_WARNING "Test done - supernode"
          done
          LOG_WARNING "Test done: ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
          echo "build_dockerfile=${{ needs.init-version.outputs.DOCKER_BUILD_DOCKERFILE_OK }}">> $GITHUB_OUTPUT
          exit 0

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{steps.n2n-test.outputs.build_dockerfile}}
          platforms: ${{ needs.init-version.outputs.BUILD_PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # no-cache: true
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:buildcache,mode=max
          build-args: |
            VERSION_B_S_rC=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            BIG_VERSION=${{ needs.init-version.outputs.BUILD_BIG_VERSION }}
            SMALL_VERSION=${{ needs.init-version.outputs.BUILD_SMALL_VERSION }}
            COMMIT=${{ needs.init-version.outputs.BUILD_COMMIT }}

      - name: Test n2n again
        id: n2n-test-again
        run: |
          LOG_INFO() {
              echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          set -e
          LOG_WARNING "Test start: ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
          flag_test_pass="true"
          platforms=${{ needs.init-version.outputs.BUILD_PLATFORMS }}
          l_platforms=(${platforms//,/ })
          for test_platform in ${l_platforms[@]};do
            LOG_WARNING "Test for platform: ${test_platform}"
            edge_result="$(docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} \
              edge -h 2>&1 | xargs -0 --no-run-if-empty -I {} echo {})"
            if [[ -z "$(echo ${edge_result,,} | grep welcome)" ]];then
              LOG_ERROR 出错了: ${test_platform} - ${edge_result}
              flag_test_pass="false"
              continue
            fi
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} \
              ls /usr/local/sbin/edge
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} \
              edge -h
            LOG_WARNING "Test pass - edge"
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} \
              ls /usr/local/sbin/supernode
            # supernode will not pass
            docker run --rm \
              --platform ${test_platform} \
              ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ needs.init-version.outputs.DOCKER_APP_NAME }}:${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }} \
              supernode -h  || echo
            # LOG_WARNING "Test done - supernode"
          done
          if [[ "${flag_test_pass}" != "true" ]];then
            LOG_ERROR "Test faild: ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
            exit 1
          fi
          LOG_WARNING "Test done: ${{ needs.init-version.outputs.BUILD_VERSION_B_S_rC }}"
          exit 0

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request'
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
