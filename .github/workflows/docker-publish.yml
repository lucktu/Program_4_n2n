name: Docker-build-and-push

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
    inputs:
      version_b_s_rc:
        description: "version_b_s_rc e.g. v2_2.7.0_r528 | v2"
        required: true
        default: "v2"
        type: string

  schedule:
    - cron: "28 17 * * *"
  push:
    branches: ["master"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]

  pull_request:
    branches: ["master"]

  workflow_call:
    inputs:
      version_b_s_rc:
        required: true
        type: string

env:
  # Use docker.io for Docker Hub if empty
  # REGISTRY: ghcr.io
  REGISTRY: docker.io

  # BIG_VERSION: v3
  # SMALL_VERSION: 3.1.1-16
  # COMMIT: 1200

  # BIG_VERSION: v2
  # SMALL_VERSION: 2.7.0
  # COMMIT: 528

  # github.repository as <account>/<repo>

jobs:
  init-version:
    runs-on: ubuntu-latest
    env:
      APP_NAME: n2n_lucktu
      DOCKER_CONTEXT_PATH: .
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    outputs:
      BIG_VERSION: ${{ steps.init-build-version.outputs.BIG_VERSION }}
      SMALL_VERSION: ${{ steps.init-build-version.outputs.SMALL_VERSION }}
      COMMIT: ${{ steps.init-build-version.outputs.COMMIT }}
      BUILD_PLATFORMS: ${{ steps.init-build-version.outputs.BUILD_PLATFORMS }}
      VERSION_B_S_rC: ${{ steps.init-build-version.outputs.VERSION_B_S_rC }}
    steps:
      - name: Checkout repository
        # depends on this library
        if: ${{ ('v2s' == inputs.version_b_s_rc || 'v2' == inputs.version_b_s_rc || 'v1' == inputs.version_b_s_rc) || (('v2s' == env.BIG_VERSION) || 'v2' == env.BIG_VERSION) || 'v1' == env.BIG_VERSION) && env.SMALL_VERSION == '') }}
        uses: actions/checkout@v3
      - name: Check init-build-version
        id: init-build-version
        run: |
          if [[ ('v2s' == inputs.version_b_s_rc || 'v2' == inputs.version_b_s_rc || 'v1' == inputs.version_b_s_rc)|| (('v2s' == env.BIG_VERSION) || 'v2' == env.BIG_VERSION) || 'v1' == env.BIG_VERSION) && env.SMALL_VERSION == '') ]];then
            if [[ ${{ 'v2s' == inputs.version_b_s_rc || 'v2' == inputs.version_b_s_rc || 'v1' == inputs.version_b_s_rc }} ]];then
              BIG_VERSION=${{ inputs.version_b_s_rc }}
            elif [[ ${{ 'v2s' == env.BIG_VERSION) || 'v2' == env.BIG_VERSION) || 'v1' == env.BIG_VERSION }} ]];then
              BIG_VERSION=${{ env.BIG_VERSION }}
            fi
            echo "BIG_VERSION=${BIG_VERSION}" >> $GITHUB_OUTPUT
            echo "SMALL_VERSION=''" >> $GITHUB_OUTPUT
            echo "COMMIT=''" >> $GITHUB_OUTPUT
            echo "BUILD_PLATFORMS=''" >> $GITHUB_OUTPUT
            echo "VERSION_B_S_rC=${BIG_VERSION}" >> $GITHUB_OUTPUT
            exit 0
          fi
          PROJECT_ROOT_DIR=$(pwd)
          echo "init-version - PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR}"
          cd ./scripts
          chmod +x *.sh
          . init_logger.sh
          . init_path.sh
          . get_file_infos.sh
          . scan_one_build.sh

          if [[ "${{ inputs.version_b_s_rc == '' }}" ]];then
            LOG_WARNING "use version_b_s_rc version"
            SCAN_ONE_BUILD ${{inputs.version_b_s_rc}}
          elif [[ "${{ env.BIG_VERSION == '' }}" || "${{ env.SMALL_VERSION == '' }}"   ]];then
            LOG_WARNING "use env version"
            BIG_VERSION=${{env.BIG_VERSION}}
            SMALL_VERSION=${{env.SMALL_VERSION}}
            COMMIT=${{env.COMMIT}}
          else
            LOG_WARNING "use latest version"
            src_file=$($(ls ${PROJECT_ROOT_DIR}/Linux) | grep x64)
            GET_FILE_INFOS ${src_file}
            BIG_VERSION=${src_big_version}
            SMALL_VERSION=${src_small_version}
            COMMIT=${src_commit}
          fi
          version_b_s_rc=${BIG_VERSION}_${SMALL_VERSION}${COMMIT:+_r}${COMMIT}
          LOG_WARNING version_b_s_rc: ${version_b_s_rc}
          SCAN_ONE_BUILD ${version_b_s_rc}
          echo "BIG_VERSION=${BIG_VERSION}" >> $GITHUB_OUTPUT
          echo "SMALL_VERSION=${SMALL_VERSION}" >> $GITHUB_OUTPUT
          echo "COMMIT=${COMMIT}" >> $GITHUB_OUTPUT
          echo "BUILD_PLATFORMS=${BUILD_PLATFORMS}" >> $GITHUB_OUTPUT
          echo "VERSION_B_S_rC=${version_b_s_rc}" >> $GITHUB_OUTPUT

  check-push:
    needs: [init-version]
    runs-on: ubuntu-latest
    outputs:
      last_pulled_date: ${{ steps.tag_last_pushed.outputs.last_pulled_date }}
      skip_build_push: ${{ steps.tag_last_pushed.outputs.skip_build_push }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: get tag_last_pushed
        id: get_tag_last_pushed
        uses: sergeysova/jq-action@v2
        with:
          cmd: curl -k -sS https://hub.docker.com/v2/repositories/${{ secrets.REGISTRY_USERNAME }}/n2n_lucktu/tags/${{ needs.init-version.outputs.VERSION_B_S_rC }} | jq '.tag_last_pushed'

      - name: Check tag_last_pushed
        id: tag_last_pushed
        run: |
          LOG_INFO() {
          echo -e "\033[0;32m[INFO] $* \033[0m"
          }
          LOG_WARNING() {
              echo -e "\033[0;33m[WARNING] $* \033[0m"
          }
          LOG_ERROR() {
              echo -e "\033[0;31m[ERROR] $* \033[0m"
          }
          # e.g. "2022-10-30T19:29:49.877019Z"
          last_pulled_date=${{ steps.get_tag_last_pushed.outputs.value }}
          echo "last_pulled_date=${last_pulled_date}" >> $GITHUB_OUTPUT
          LOG_INFO "last_pulled_date - ${last_pulled_date}"
          if [[ "${{ env.FORCE_PUSH }}" ]]; then
              LOG_WARNING "强制 编译/推送"
          elif [[ "${last_pulled_date,,}" != "null" ]]; then
              echo 'skip_build_push=true' >> $GITHUB_OUTPUT
              LOG_INFO "跳过 编译/推送"
              exit 0
          else
              LOG_INFO "准备 编译/推送"
          fi

  build-psuh:
    needs: [init-version, check-push]
    if: ${{ needs.check-push.outputs.skip_build_push != 'true' }}
    runs-on: ubuntu-latest
    env:
      APP_NAME: n2n_lucktu
      DOCKER_CONTEXT_PATH: .
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
    steps:
      - name: Checkout repository on build-psuh
        uses: actions/checkout@v3
      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: ${{ github.event_name != 'pull_request' }}
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.13.1"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}
          tags: |
            type=raw,value=alpha,enable=${{ github.ref == format('refs/heads/{0}', 'alpha') }}
            type=raw,value=beta,enable=${{ github.ref == format('refs/heads/{0}', 'beta') }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=v3,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v3' }}
            type=raw,value=releases-v3,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v3' }}
            type=raw,value=v2s,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v2s' && needs.init-version.outputs.SMALL_VERSION == '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=releases-v2s,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v2s' && needs.init-version.outputs.SMALL_VERSION == '2.1.0' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=v2,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v2' && needs.init-version.outputs.SMALL_VERSION == '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=releases-v2,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v2' && needs.init-version.outputs.SMALL_VERSION == '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=v1,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v1' && needs.init-version.outputs.SMALL_VERSION == '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=releases-v1,enable=${{ needs.init-version.outputs.BIG_VERSION == 'v1' && needs.init-version.outputs.SMALL_VERSION == '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=${{ format( '{0}_{1}_r{2}', needs.init-version.outputs.BIG_VERSION, needs.init-version.outputs.SMALL_VERSION, needs.init-version.outputs.COMMIT ) }}, enable=${{ needs.init-version.outputs.BIG_VERSION != '' && needs.init-version.outputs.SMALL_VERSION != '' && needs.init-version.outputs.COMMIT != '' }}
            type=raw,value=${{ format( '{0}_{1}', needs.init-version.outputs.BIG_VERSION, needs.init-version.outputs.SMALL_VERSION, needs.init-version.outputs.COMMIT ) }}, enable=${{ needs.init-version.outputs.BIG_VERSION != '' && needs.init-version.outputs.SMALL_VERSION != '' && needs.init-version.outputs.COMMIT == '' }}
            type=raw,value=${{ format( 'v.{1}_r{2}',  needs.init-version.outputs.BIG_VERSION, needs.init-version.outputs.SMALL_VERSION, needs.init-version.outputs.COMMIT ) }}, enable=${{ needs.init-version.outputs.SMALL_VERSION != '' && needs.init-version.outputs.COMMIT != '' }}
            type=raw,value=${{ format( 'v.{1}',  needs.init-version.outputs.BIG_VERSION, needs.init-version.outputs.SMALL_VERSION, needs.init-version.outputs.COMMIT ) }}, enable=${{ needs.init-version.outputs.SMALL_VERSION != '' }}
          labels: |
            org.opencontainers.image.version=${{ format( '{0}_{1}_r{2}', needs.init-version.outputs.BIG_VERSION, needs.init-version.outputs.SMALL_VERSION, needs.init-version.outputs.COMMIT ) }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.DOCKER_CONTEXT_PATH }}
          load: true
          tags: ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:test
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:buildcache
          cache-to: type=inline

      - name: Test
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:test edge -h
          docker run --rm ${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:test supernode -h

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ env.DOCKER_CONTEXT_PATH }}
          platforms: ${{ needs.init-version.outputs.BUILD_PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=inline
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ secrets.REGISTRY_USERNAME }}/${{ env.APP_NAME }}:buildcache,mode=max
          build-args: |
            BIG_VERSION=${{ needs.init-version.outputs.BIG_VERSION }}
            SMALL_VERSION=${{ needs.init-version.outputs.SMALL_VERSION }}
            COMMIT=${{ needs.init-version.outputs.COMMIT }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
