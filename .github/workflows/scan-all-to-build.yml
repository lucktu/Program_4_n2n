name: manual-scan-all-to-build

on:
  workflow_dispatch:
    inputs:
      build-releases-version:
        description: "Build all releases versions? v2s|v2|v1"
        required: true
        type: boolean
        default: false
      force-push:
        description: "force push to registry"
        required: true
        type: boolean
        default: false
      DOCKER_APP_NAME:
        description: "docker app name             e.g. n2n"
        default: "n2n_lucktu"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_OK:
        description: "docker_build_dockerfile_ok  e.g. Dockerfile.ubuntu-latest | Dockerfile.alpine-latest | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string
      DOCKER_BUILD_DOCKERFILE_FIX:
        description: "docker_build_dockerfile_fix e.g. Dockerfile.ubuntu-18.04 | Dockerfile.alpine-3.8 | Dockerfile.debian-stable"
        default: "Dockerfile.debian-stable"
        required: true
        type: string
jobs:
  scan-all:
    runs-on: ubuntu-latest
    env:
      APP_NAME: n2n_lucktu
      DOCKER_CONTEXT_PATH: .
    permissions:
      contents: read
      packages: write
    outputs:
      version_b_s_rcs: ${{ steps.build_version.outputs.version_b_s_rcs }}
      force_push: ${{ steps.build_version.outputs.force_push }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Check build_version
        id: build_version
        run: |
          PROJECT_ROOT_DIR=$(pwd)
          echo "scan-all - PROJECT_ROOT_DIR: ${PROJECT_ROOT_DIR}"
          cd ./scripts
          chmod +x *.sh
          . init_logger.sh
          . init_path.sh
          . scan_all_save.sh
          LOG_INFO 'scan_all_save Successful'
          . scan_all_build.sh
          LOG_INFO 'scan_all_build Successful'
          version_b_s_rcs=''
          l_build_version_b_s_rcs=(${build_version_b_s_rcs//,/ })
          for version_b_s_rc in ${l_build_version_b_s_rcs[@]}; do
            LOG_INFO "version_b_s_rc: ${version_b_s_rc}"
            version_b_s_rcs="${version_b_s_rcs}, {\"version_b_s_rc\": \"${version_b_s_rc}\"}"
          done
          version_b_s_rcs="${version_b_s_rcs:1} "
          version_b_s_rcs="{\"include\":[${version_b_s_rcs}]}"
          LOG_INFO  version_b_s_rcs: ${version_b_s_rcs}
          force_push=${{ inputs.force-push }}
          LOG_INFO  force_push: ${force_push}
          echo "version_b_s_rcs=${version_b_s_rcs}" >> $GITHUB_OUTPUT
          echo "force_push=${force_push}" >> $GITHUB_OUTPUT

  build-all:
    needs: [scan-all]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix: ${{ fromJSON(needs.scan-all.outputs.version_b_s_rcs) }}

    uses: ./.github/workflows/docker-publish.yml
    with:
      version_b_s_rc: ${{ matrix.version_b_s_rc }}
      force_push: ${{ needs.scan-all.outputs.force_push == 'true' }}
      DOCKER_APP_NAME: ${{ inputs.DOCKER_APP_NAME }}
      DOCKER_BUILD_DOCKERFILE_OK: ${{ inputs.DOCKER_BUILD_DOCKERFILE_OK }}
      DOCKER_BUILD_DOCKERFILE_FIX: ${{ inputs.DOCKER_BUILD_DOCKERFILE_FIX }}
    secrets: inherit

  build-releases-version:
    permissions:
      contents: read
      packages: write
      id-token: write
    if: ${{ inputs.build-releases-version }}
    strategy:
      fail-fast: false
      # max-parallel: 1
      matrix:
        version_b_s_rc: [v1, v2, v2s]
    uses: ./.github/workflows/docker-publish.yml
    with:
      version_b_s_rc: ${{ matrix.version_b_s_rc }}
      force_push: ${{ inputs.force-push == 'true' }}
      DOCKER_APP_NAME: ${{ inputs.DOCKER_APP_NAME }}
      DOCKER_BUILD_DOCKERFILE_OK: ${{ inputs.DOCKER_BUILD_DOCKERFILE_OK }}
      DOCKER_BUILD_DOCKERFILE_FIX: ${{ inputs.DOCKER_BUILD_DOCKERFILE_FIX }}
    secrets: inherit
